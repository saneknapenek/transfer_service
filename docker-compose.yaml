services:


  main_service:

    build: ./main_service

    image: saneknapenek/transfer_service_main_service:latest

    container_name: main_s

    restart: unless-stopped

    environment:
      TZ: "Europe/Moscow"

    ports:
      - 8000:8000

    expose:
      - 8000

    working_dir: /main_service/src

    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500MB

    networks:
      - tr_net

    volumes:
      - ./main_service:/main_service

    depends_on:
      - database


  yandex_service:

    build: ./yandex_service

    image: saneknapenek/transfer_service_yandex_service:latest

    container_name: yandex_s

    restart: unless-stopped

    environment:
      TZ: "Europe/Moscow"

    ports:
      - 8001:8001

    expose:
      - 8001

    working_dir: /yandex_service/src

    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500MB

    networks:
      - tr_net

    volumes:
      - ./yandex_service:/yandex_service

    depends_on:
      - main_service
      - database
      - redis


  database:

    image: postgres:15.2

    environment:
      POSTGRES_DB: "transfer"
      POSTGRES_USER: "san"
      POSTGRES_PASSWORD: "san"
      PGDATA: "/var/lib/postgresql/data/pgdata"
      TZ: "Europe/Moscow"
      #!

    volumes:
      - transferdb-data:/var/lib/postgresql/data

    container_name: database

    restart: unless-stopped

    ports:
      - 5432:5432

    expose:
      - 5432

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

    networks:
      - tr_net


  redis:

    image: redis:7.2-alpine

    environment:
      TZ: "Europe/Moscow"

    container_name: redis

    restart: unless-stopped

    ports:
      - 6379:6379

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500MB

    networks:
      - tr_net

    depends_on:
      - database


  worker:
    
    build: ./worker

    container_name: worker

    restart: unless-stopped

    environment:
      TZ: "Europe/Moscow"

    command: celery -A tasks.clr worker --loglevel=info

    volumes:
      - ./worker:/worker

    networks:
      - tr_net

    depends_on:
      - redis


networks:
  tr_net:
    name: tr_net
    external: true


volumes:
  transferdb-data:
